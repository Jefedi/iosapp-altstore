name: Build iOS App for AltStore

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PROJECT_NAME: AltStoreApp
  SCHEME_NAME: AltStoreApp

jobs:
  build:
    name: Build and Export IPA
    runs-on: macos-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
        
    - name: Cache Xcode Build
      uses: actions/cache@v4
      with:
        path: |
          ~/Library/Developer/Xcode/DerivedData
          build
        key: ${{ runner.os }}-xcode-${{ hashFiles('**/*.xcodeproj') }}
        restore-keys: |
          ${{ runner.os }}-xcode-
          
    - name: Create build directory
      run: mkdir -p build
          
    - name: Install Dependencies
      run: |
        # Si vous avez des dépendances CocoaPods ou SPM
        # pod install --repo-update
        echo "No dependencies to install"
        
    - name: Debug Project Structure  
      run: |
        echo "=== Current Directory ==="
        pwd
        echo "=== List all files ==="
        ls -la
        echo "=== Xcode Project Contents ==="
        if [ -d "${{ env.PROJECT_NAME }}.xcodeproj" ]; then
          ls -la ${{ env.PROJECT_NAME }}.xcodeproj/
        else
          echo "❌ Xcode project not found!"
          exit 1
        fi
        echo "=== Verify Scheme ==="
        xcodebuild -project ${{ env.PROJECT_NAME }}.xcodeproj -list
        
    - name: Build Archive
      run: |
        set -e
        echo "Building archive for ${{ env.PROJECT_NAME }}..."
        xcodebuild -project ${{ env.PROJECT_NAME }}.xcodeproj \
                   -scheme ${{ env.SCHEME_NAME }} \
                   -configuration Release \
                   -archivePath build/${{ env.PROJECT_NAME }}.xcarchive \
                   -destination "generic/platform=iOS" \
                   DEVELOPMENT_TEAM="" \
                   CODE_SIGN_IDENTITY="" \
                   CODE_SIGNING_REQUIRED=NO \
                   CODE_SIGNING_ALLOWED=NO \
                   archive
                   
    - name: Export IPA
      run: |
        set -e
        echo "Exporting IPA..."
        xcodebuild -exportArchive \
                   -archivePath build/${{ env.PROJECT_NAME }}.xcarchive \
                   -exportPath build/ \
                   -exportOptionsPlist ExportOptions.plist
                   
    - name: Verify IPA
      run: |
        IPA_PATH="build/${{ env.PROJECT_NAME }}.ipa"
        if [ -f "$IPA_PATH" ]; then
          echo "✅ IPA created successfully"
          ls -la "$IPA_PATH"
          echo "📊 IPA Size: $(du -h "$IPA_PATH" | cut -f1)"
        else
          echo "❌ IPA not found"
          ls -la build/
          exit 1
        fi
        
    - name: Upload IPA Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.PROJECT_NAME }}-${{ github.sha }}
        path: build/${{ env.PROJECT_NAME }}.ipa
        retention-days: 30
        
    - name: Upload to Release (Tags only)
      if: startsWith(github.ref, 'refs/tags/v')
      uses: softprops/action-gh-release@v2
      with:
        files: |
          build/${{ env.PROJECT_NAME }}.ipa
          altstore-source.json
        draft: false
        prerelease: false
        generate_release_notes: true
        
    - name: Update Manifest
      if: startsWith(github.ref, 'refs/tags/v')
      run: |
        # Mettre à jour les URLs dans le manifeste avec les vraies URLs de release
        TAG_NAME=${GITHUB_REF#refs/tags/}
        RELEASE_URL="https://github.com/${{ github.repository }}/releases/download/$TAG_NAME/${{ env.PROJECT_NAME }}.ipa"
        
        echo "Updating manifest with release URL: $RELEASE_URL"
        
        # Remplacer l'URL dans le manifeste avec l'URL actuelle de GitHub
        if [[ "$OSTYPE" == "darwin"* ]]; then
          sed -i '' "s|https://github.com/Jefedi/iosapp-altstore/releases/download/v1.0.0/AltStoreApp.ipa|$RELEASE_URL|g" altstore-source.json
          sed -i '' "s|https://github.com/Jefedi/iosapp-altstore/releases/download/v1.0.0/AltStoreApp.ipa|$RELEASE_URL|g" altstore-manifest.json
        else
          sed -i "s|https://github.com/Jefedi/iosapp-altstore/releases/download/v1.0.0/AltStoreApp.ipa|$RELEASE_URL|g" altstore-source.json
          sed -i "s|https://github.com/Jefedi/iosapp-altstore/releases/download/v1.0.0/AltStoreApp.ipa|$RELEASE_URL|g" altstore-manifest.json
        fi
        
        echo "✅ Manifest updated with release URL: $RELEASE_URL"
        
    - name: Build Summary
      if: always()
      run: |
        echo "## Build Summary 📱" >> $GITHUB_STEP_SUMMARY
        echo "- **Project**: ${{ env.PROJECT_NAME }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Scheme**: ${{ env.SCHEME_NAME }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Configuration**: Release" >> $GITHUB_STEP_SUMMARY
        if [ -f "build/${{ env.PROJECT_NAME }}.ipa" ]; then
          IPA_SIZE=$(du -h "build/${{ env.PROJECT_NAME }}.ipa" | cut -f1)
          echo "- **IPA Size**: $IPA_SIZE" >> $GITHUB_STEP_SUMMARY
        fi
        echo "- **Runner**: ${{ runner.os }} (${{ runner.arch }})" >> $GITHUB_STEP_SUMMARY