name: 📦 Auto Release on Tag

# Se déclenche uniquement quand un tag est créé
on:
  push:
    tags:
      - 'v*'

# Permissions nécessaires
permissions:
  contents: write
  actions: read

jobs:
  create-release:
    runs-on: macos-latest
    name: 🚀 Build & Release
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🏷️ Extract Version from Tag
      id: version
      run: |
        TAG_NAME=${GITHUB_REF#refs/tags/}
        VERSION=${TAG_NAME#v}
        echo "tag=$TAG_NAME" >> $GITHUB_OUTPUT
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "📋 Tag: $TAG_NAME"
        echo "📋 Version: $VERSION"

    - name: 📖 Load App Configuration
      id: config
      run: |
        APP_NAME=$(cat config.json | jq -r '.app.name')
        BUNDLE_ID=$(cat config.json | jq -r '.app.bundleId')
        DEVELOPER=$(cat config.json | jq -r '.app.developer')
        DISPLAY_NAME=$(cat config.json | jq -r '.app.displayName')
        DESCRIPTION=$(cat config.json | jq -r '.descriptions.long')
        
        echo "app_name=$APP_NAME" >> $GITHUB_OUTPUT
        echo "bundle_id=$BUNDLE_ID" >> $GITHUB_OUTPUT
        echo "developer=$DEVELOPER" >> $GITHUB_OUTPUT
        echo "display_name=$DISPLAY_NAME" >> $GITHUB_OUTPUT
        
        # Escape newlines for description
        DESCRIPTION_ESCAPED=$(echo "$DESCRIPTION" | sed ':a;N;$!ba;s/\n/\\n/g')
        echo "description=$DESCRIPTION_ESCAPED" >> $GITHUB_OUTPUT

    - name: 🔄 Update Config Version
      run: |
        # Update version in config.json to match tag
        jq --arg version "${{ steps.version.outputs.version }}" '.app.version = $version' config.json > config.json.tmp
        mv config.json.tmp config.json
        
        # Update release date
        CURRENT_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        jq --arg date "$CURRENT_DATE" '.release.date = $date' config.json > config.json.tmp
        mv config.json.tmp config.json
        
        # Update release title
        jq --arg title "${{ steps.config.outputs.app_name }} ${{ steps.version.outputs.tag }} Disponible !" '.release.title = $title' config.json > config.json.tmp
        mv config.json.tmp config.json
        
        echo "✅ Config.json updated with version ${{ steps.version.outputs.version }}"

    - name: 🔧 Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: 'latest-stable'

    - name: 🏗️ Build iOS App
      run: |
        cd JAPP.xcodeproj
        
        # Update project version to match tag
        sed -i '' "s/MARKETING_VERSION = [^;]*/MARKETING_VERSION = ${{ steps.version.outputs.version }}/g" project.pbxproj
        
        cd ..
        
        # Build for iOS
        xcodebuild archive \
          -project JAPP.xcodeproj \
          -scheme JAPP \
          -destination generic/platform=iOS \
          -archivePath build/JAPP.xcarchive \
          MARKETING_VERSION=${{ steps.version.outputs.version }} \
          CURRENT_PROJECT_VERSION=${{ steps.version.outputs.version }}
        
        # Export IPA
        xcodebuild -exportArchive \
          -archivePath build/JAPP.xcarchive \
          -exportPath build/ \
          -exportOptionsPlist ExportOptions.plist
        
        # Check if IPA was created
        if [ -f "build/${{ steps.config.outputs.app_name }}.ipa" ]; then
          echo "✅ IPA built successfully: build/${{ steps.config.outputs.app_name }}.ipa"
          ls -la build/
        else
          echo "❌ IPA not found, checking build directory:"
          ls -la build/
          exit 1
        fi

    - name: 📦 Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.version.outputs.tag }}
        name: "${{ steps.config.outputs.app_name }} ${{ steps.version.outputs.tag }}"
        body: |
          ## 🎉 ${{ steps.config.outputs.display_name }} ${{ steps.version.outputs.tag }}
          
          ### 📱 Nouveautés de cette version :
          
          ${{ steps.config.outputs.description }}
          
          ### 📥 Installation :
          
          **Via AltStore :**
          1. Ajouter la source : `https://raw.githubusercontent.com/${{ github.repository }}/main/altstore-source.json`
          2. Installer **${{ steps.config.outputs.app_name }}** depuis AltStore
          
          **Installation manuelle :**
          1. Télécharger le fichier `${{ steps.config.outputs.app_name }}.ipa` ci-dessous
          2. Installer avec AltStore, Sideloadly ou votre méthode préférée
          
          ### ℹ️ Informations techniques :
          
          - **Version** : ${{ steps.version.outputs.version }}
          - **Bundle ID** : ${{ steps.config.outputs.bundle_id }}
          - **Développeur** : ${{ steps.config.outputs.developer }}
          - **Compatibilité** : iOS 17.0+
          
          ---
          
          **Changelog complet** : https://github.com/${{ github.repository }}/compare/v1.0.5...${{ steps.version.outputs.tag }}
        files: |
          build/${{ steps.config.outputs.app_name }}.ipa
        draft: false
        prerelease: false
        make_latest: true
        fail_on_unmatched_files: false

    - name: 🔄 Update JSON Configuration Files
      run: |
        # Read updated config
        APP_NAME=$(cat config.json | jq -r '.app.name')
        VERSION=$(cat config.json | jq -r '.app.version')
        BUNDLE_ID=$(cat config.json | jq -r '.app.bundleId')
        DEVELOPER=$(cat config.json | jq -r '.app.developer')
        SUBTITLE=$(cat config.json | jq -r '.app.subtitle')
        VERSION_DATE=$(cat config.json | jq -r '.release.date')
        VERSION_DESC=$(cat config.json | jq -r '.descriptions.versionInitial')
        LONG_DESC=$(cat config.json | jq -r '.descriptions.long')
        ICON_URL=$(cat config.json | jq -r '.urls.icon')
        TINT_COLOR=$(cat config.json | jq -r '.app.tintColor')
        SIZE=$(cat config.json | jq -r '.app.size')
        IPA_URL="https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.tag }}/$APP_NAME.ipa"
        SCREENSHOT1=$(cat config.json | jq -r '.urls.screenshots.screenshot1')
        SCREENSHOT2=$(cat config.json | jq -r '.urls.screenshots.screenshot2')
        SCREENSHOT3=$(cat config.json | jq -r '.urls.screenshots.screenshot3')
        VERSION_FULL_DESC=$(cat config.json | jq -r '.descriptions.version')
        NEWS_TITLE=$(cat config.json | jq -r '.release.title')
        NEWS_CAPTION=$(cat config.json | jq -r '.release.caption')
        PATREON=$(cat config.json | jq -r '.social.patreon')
        DISCORD=$(cat config.json | jq -r '.social.discord')
        TWITTER=$(cat config.json | jq -r '.social.twitter')
        
        # Update manifest.json
        jq --arg name "$APP_NAME" \
           --arg bundleId "$BUNDLE_ID" \
           --arg developer "$DEVELOPER" \
           --arg subtitle "$SUBTITLE" \
           --arg version "$VERSION" \
           --arg versionDate "$VERSION_DATE" \
           --arg versionDesc "$VERSION_DESC" \
           --arg downloadURL "$IPA_URL" \
           --arg localizedDesc "$LONG_DESC" \
           --arg iconURL "$ICON_URL" \
           --arg tintColor "$TINT_COLOR" \
           --argjson size "$SIZE" \
           --arg screenshot1 "$SCREENSHOT1" \
           --arg screenshot2 "$SCREENSHOT2" \
           '{
             "name": $name,
             "bundleIdentifier": $bundleId,
             "developerName": $developer,
             "subtitle": $subtitle,
             "version": $version,
             "versionDate": $versionDate,
             "versionDescription": $versionDesc,
             "downloadURL": $downloadURL,
             "localizedDescription": $localizedDesc,
             "iconURL": $iconURL,
             "tintColor": $tintColor,
             "size": $size,
             "screenshotURLs": [$screenshot1, $screenshot2],
             "permissions": [{
               "type": "background-fetch",
               "usageDescription": "Pas de permissions spéciales requises."
             }],
             "appPermissions": {
               "entitlements": [{"name": "com.apple.security.app-sandbox"}],
               "privacy": {}
             }
           }' > manifest.json
        
        # Update altstore-source.json
        jq --arg name "$APP_NAME" \
           --arg bundleId "$BUNDLE_ID" \
           --arg sourceURL "https://raw.githubusercontent.com/${{ github.repository }}/main/altstore-source.json" \
           --arg developer "$DEVELOPER" \
           --arg subtitle "$SUBTITLE" \
           --arg version "$VERSION" \
           --arg versionDate "$VERSION_DATE" \
           --arg versionDesc "$VERSION_FULL_DESC" \
           --arg downloadURL "$IPA_URL" \
           --arg localizedDesc "$LONG_DESC" \
           --arg iconURL "$ICON_URL" \
           --arg tintColor "$TINT_COLOR" \
           --argjson size "$SIZE" \
           --arg screenshot1 "$SCREENSHOT1" \
           --arg screenshot2 "$SCREENSHOT2" \
           --arg screenshot3 "$SCREENSHOT3" \
           --arg newsTitle "$NEWS_TITLE" \
           --arg newsCaption "$NEWS_CAPTION" \
           --arg patreon "$PATREON" \
           --arg discord "$DISCORD" \
           --arg twitter "$TWITTER" \
           '{
             "name": ($name + " Store"),
             "identifier": ($bundleId + ".source"),
             "sourceURL": $sourceURL,
             "apps": [{
               "name": $name,
               "bundleIdentifier": $bundleId,
               "developerName": $developer,
               "subtitle": $subtitle,
               "version": $version,
               "versionDate": $versionDate,
               "versionDescription": $versionDesc,
               "downloadURL": $downloadURL,
               "localizedDescription": $localizedDesc,
               "iconURL": $iconURL,
               "tintColor": $tintColor,
               "size": $size,
               "beta": false,
               "screenshots": [$screenshot1, $screenshot2, $screenshot3],
               "permissions": [{"type": "none", "usageDescription": ($name + " ne nécessite aucune permission spéciale pour fonctionner.")}],
               "appPermissions": {}
             }],
             "news": [{
               "title": $newsTitle,
               "identifier": (($name | ascii_downcase) + "-v" + $version + "-release"),
               "caption": $newsCaption,
               "tintColor": $tintColor,
               "date": $versionDate,
               "notify": false,
               "url": ("https://github.com/${{ github.repository }}/releases/tag/" + $version)
             }],
             "userInfo": {
               "patreonURL": $patreon,
               "discordURL": $discord,
               "twitterURL": $twitter
             }
           }' > altstore-source.json

    - name: 📤 Commit Updated Files
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Release Bot"
        
        # Add all changed files
        git add config.json manifest.json altstore-source.json JAPP.xcodeproj/project.pbxproj || true
        
        # Check if there are changes to commit
        if git diff --cached --quiet; then
          echo "ℹ️ No changes to commit"
        else
          git commit -m "🤖 Auto-update for release ${{ steps.version.outputs.tag }}
          
          - Updated config.json with version ${{ steps.version.outputs.version }}
          - Updated manifest.json with new download URL
          - Updated altstore-source.json with release info
          - Synchronized Xcode project version
          
          Release: https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.tag }}"
          
          # Push changes
          git push origin main || echo "⚠️ Could not push changes (may be normal)"
        fi

    - name: ✅ Release Summary
      run: |
        echo "## 🎉 Release ${{ steps.version.outputs.tag }} Created Successfully!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📱 App Details:" >> $GITHUB_STEP_SUMMARY
        echo "- **Name**: ${{ steps.config.outputs.app_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Version**: ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Bundle ID**: ${{ steps.config.outputs.bundle_id }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Developer**: ${{ steps.config.outputs.developer }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔗 Links:" >> $GITHUB_STEP_SUMMARY
        echo "- [📦 Release Page](https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.tag }})" >> $GITHUB_STEP_SUMMARY
        echo "- [📥 Download IPA](https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.tag }}/${{ steps.config.outputs.app_name }}.ipa)" >> $GITHUB_STEP_SUMMARY
        echo "- [🏪 AltStore Source](https://raw.githubusercontent.com/${{ github.repository }}/main/altstore-source.json)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📱 Installation:" >> $GITHUB_STEP_SUMMARY
        echo "**Via AltStore:**" >> $GITHUB_STEP_SUMMARY
        echo "1. Add source: \`https://raw.githubusercontent.com/${{ github.repository }}/main/altstore-source.json\`" >> $GITHUB_STEP_SUMMARY
        echo "2. Install ${{ steps.config.outputs.app_name }} from AltStore" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Manual Installation:**" >> $GITHUB_STEP_SUMMARY
        echo "1. Download the IPA file from the release" >> $GITHUB_STEP_SUMMARY
        echo "2. Install using AltStore, Sideloadly, or your preferred sideloading tool" >> $GITHUB_STEP_SUMMARY